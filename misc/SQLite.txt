-----------------------------------------------
         FTS
-----------------------------------------------

* в файле проекта C:\Qt\4.8.0\src\plugins\sqldrivers\sqlite\sqlite.pro добавляем строку после первого DEFINES += 

DEFINES += SQLITE_ENABLE_FTS3 SQLITE_ENABLE_FTS3_PARENTHESIS

* qmake, make all / make debug / make release, make install или скопировать библиотеки в C:\Qt\4.8.0\plugins\sqldrivers

* проверка запросом 

QSqlQuery query("PRAGMA compile_options", db);

* для Qt статики добавить флаги 

-qt-sql-sqlite -D SQLITE_ENABLE_FTS3 -D SQLITE_ENABLE_FTS3_PARENTHESIS

-----------------------------------------------
         REGEXP
-----------------------------------------------

* в текущий проект добавляем

INCLUDEPATH += C:/Qt/4.8.2s/src/3rdparty/sqlite

* подключаем заголовочный файл

#include <sqlite3.h>

* регистрация в main.cpp

QVariant v = db.driver()->handle();
sqlite3* handle = *static_cast<sqlite3**>(v.data());

sqlite3_create_function(handle, "regexp", 2, SQLITE_UTF8, NULL, &regexp, NULL, NULL);

* определение

static void sqlregexp(sqlite3_context* ctx, int argc, sqlite3_value** argv)
{
    QRegExp regex;
    QString arg0((const char*)sqlite3_value_text(argv[0]));
    QString arg1((const char*)sqlite3_value_text(argv[1]));

    regex.setPatternSyntax(QRegExp::Wildcard);
    regex.setPattern(arg0);
    regex.setCaseSensitivity(Qt::CaseInsensitive);

    if(arg1.contains(regex))
      sqlite3_result_int(ctx, 1);
    else
		sqlite3_result_int(ctx, 0);
}

* использование 

QSqlQuery query("SELECT word FROM dictEntries WHERE desc REGEXP 'light' GROUP BY word ORDER BY word", db);